plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30-M1'
    id "com.github.ben-manes.versions" version "0.36.0"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

repositories {
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
    maven { url 'https://maven-central.storage-download.googleapis.com/repos/central/data/' }
    jcenter()
    maven { url = 'https://jitpack.io' }
}

def mainName = 'org.athenian.Main'
def appName = 'server'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'org.athenian'
version '1.0.0'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "org.jetbrains:kotlin-css-jvm:$css_version"

    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"
    implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"

    implementation "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    implementation "ch.qos.logback:logback-classic:${logback_version}"
    implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"
    implementation "io.github.microutils:kotlin-logging:${logging_version}"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "org.amshove.kluent:kluent:${kluent_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
    mergeServiceFiles()
}

task uberjar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-XXLanguage:+InlineClasses']
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                                       '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                                       '-Xuse-experimental=io.ktor.locations.KtorExperimentalLocationsAPI',
                                       '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                                       '-XXLanguage:+InlineClasses']
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}