plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id "com.github.ben-manes.versions" version "0.40.0"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    maven { url 'https://maven.pkg.jetbrains.space/public/p/ktor/eap'; name 'ktor-eap' }
    maven { url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers" }
    google()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

def mainName = 'org.athenian.Main'
def appName = 'server'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'org.athenian'
version '1.0.0'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "org.jetbrains:kotlin-css-jvm:$css_version"

    implementation "io.ktor:ktor-serialization-gson:$ktor_version"

    implementation "io.ktor:ktor-server:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-server-html-builder:$ktor_version"
    implementation "io.ktor:ktor-server-locations:$ktor_version"

    implementation "io.ktor:ktor-client:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"

    implementation "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    implementation "ch.qos.logback:logback-classic:${logback_version}"
    implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"
    implementation "io.github.microutils:kotlin-logging:${logging_version}"

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "org.amshove.kluent:kluent:${kluent_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
    mergeServiceFiles()
}

task uberjar(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'server.jar'
    manifest {
        attributes('Implementation-Title': appName)
        attributes('Implementation-Version': version)
        attributes('Built-Date': new Date())
        attributes('Built-JDK': System.getProperty('java.version'))
        attributes('Main-Class': mainName)
    }
    from zipTree(shadowJar.archiveFile)
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                             '-Xuse-experimental=io.ktor.server.locations.KtorExperimentalLocationsAPI',
                             '-Xuse-experimental=io.ktor.util.InternalAPI',
                             '-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                             '-Xuse-experimental=io.ktor.server.locations.KtorExperimentalLocationsAPI',
                             '-Xuse-experimental=io.ktor.util.InternalAPI',
                             '-Xuse-experimental=kotlin.ExperimentalStdlibApi']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}